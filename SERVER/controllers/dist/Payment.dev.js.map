{"version":3,"sources":["Payment.js"],"names":["stripe","require","process","env","STRIPE_SECRET_KEY","Course","User","mailSender","courseEnrollmentEmail","mongoose","exports","capturePayment","req","res","course_id","body","userId","user","id","status","json","success","message","findById","course","uid","Types","ObjectId","studentsEnrolled","includes","console","error","amount","price","currency","paymentIntents","create","metadata","courseId","paymentIntent","clientSecret","client_secret","courseName","courseDescription","thumbnail","handlePaymentSuccess","user_id","findByIdAndUpdate","$push","enrolledCourse","courses","enrolledStudent","email","emailResponse","log"],"mappings":"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","sourcesContent":["const stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY); // Use your Stripe secret key\nconst Course = require(\"../models/Course\");\nconst User = require(\"../models/User\");\nconst mailSender = require(\"../utils/mailSender\");\nconst { courseEnrollmentEmail } = require(\"../mail/courseEnrollmentEmail\");\nconst mongoose = require(\"mongoose\");\n\n// Capture Payment\nexports.capturePayment = async (req, res) => {\n    const { course_id } = req.body;\n    const userId = req.user.id;\n\n    if (!course_id) {\n        return res.status(400).json({\n            success: false,\n            message: \"Please provide a valid course ID\",\n        });\n    }\n\n    let course;\n    try {\n        course = await Course.findById(course_id);\n        if (!course) {\n            return res.status(404).json({\n                success: false,\n                message: \"Could not find the course\",\n            });\n        }\n\n        const uid = new mongoose.Types.ObjectId(userId);\n        if (course.studentsEnrolled.includes(uid)) {\n            return res.status(400).json({\n                success: false,\n                message: \"Student is already enrolled\",\n            });\n        }\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({\n            success: false,\n            message: \"Error retrieving course details\",\n        });\n    }\n\n    const amount = course.price * 100; // Stripe processes amounts in cents\n    const currency = \"INR\";\n\n    try {\n        // Create a payment intent\n        const paymentIntent = await stripe.paymentIntents.create({\n            amount,\n            currency,\n            metadata: {\n                courseId: course_id,\n                userId,\n            },\n        });\n\n        return res.status(200).json({\n            success: true,\n            clientSecret: paymentIntent.client_secret,\n            courseName: course.courseName,\n            courseDescription: course.courseDescription,\n            thumbnail: course.thumbnail,\n            amount: paymentIntent.amount,\n            currency: paymentIntent.currency,\n        });\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({\n            success: false,\n            message: \"Could not initiate payment\",\n        });\n    }\n};\n\n// Handle Payment Completion\nexports.handlePaymentSuccess = async (req, res) => {\n    const { course_id, user_id } = req.body;\n\n    if (!course_id || !user_id) {\n        return res.status(400).json({\n            success: false,\n            message: \"Course ID and User ID are required\",\n        });\n    }\n\n    try {\n        // Update the course and user documents\n        const enrolledCourse = await Course.findByIdAndUpdate(\n            course_id,\n            { $push: { studentsEnrolled: user_id } },\n            { new: true }\n        );\n\n        if (!enrolledCourse) {\n            return res.status(404).json({\n                success: false,\n                message: \"Course not found\",\n            });\n        }\n\n        const enrolledStudent = await User.findByIdAndUpdate(\n            user_id,\n            { $push: { courses: course_id } },\n            { new: true }\n        );\n\n        if (!enrolledStudent) {\n            return res.status(404).json({\n                success: false,\n                message: \"User not found\",\n            });\n        }\n\n        // Send email\n        const emailResponse = await mailSender(\n            enrolledStudent.email,\n            \"Course Enrollment Success\",\n            courseEnrollmentEmail(enrolledCourse.courseName)\n        );\n\n        console.log(\"Email sent: \", emailResponse);\n\n        return res.status(200).json({\n            success: true,\n            message: \"Payment successful and course enrollment updated\",\n        });\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({\n            success: false,\n            message: \"Error processing payment\",\n        });\n    }\n};\n"],"file":"Payment.dev.js"}
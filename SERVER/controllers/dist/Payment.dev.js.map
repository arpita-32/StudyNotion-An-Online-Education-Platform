{"version":3,"sources":["Payment.js"],"names":["require","instance","Course","User","mailSender","courseEnrollmentEmail","exports","capturePayment","req","res","course_id","body","userId","user","id","json","success","message","findById","course","uid","mongoose","Types","ObjectId","studentsEnrolled","includes","status","console","error","amount","price","currency","options","receipt","Math","random","Date","now","toString","notes","courseId","orders","create","paymentResponse","log","courseName","courseDescription","thumbnail","orderId","verifySignature","webhookSecret","signature","headers","shasum","crypto","createHmac","update","JSON","stringify","digest","payload","payment","entity","findOneAndUpdate","_id","$push","enrolledCourse","courses","enrolledStudent","email","emailResponse"],"mappings":"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","sourcesContent":["const {instance} = require(\"../config/razorpay\");\nconst Course = require(\"../models/Course\");\nconst User = require(\"../models/User\");\nconst mailSender = require(\"../utils/mailSender\");\nconst {courseEnrollmentEmail} = require(\"../mail/courseEnrollmentEmail\");\n\nexports.capturePayment = async (req , res) => {\n\n    const {course_id} = req.body;\n    const userId = req.user.id;\n\n    if(!course_id) {\n        return res.json({\n            success:false,\n            message:'Please provide valid course otp',\n            \n        })\n    };\n\n    let course;\n    try{\n        course = await Course.findById(course_id);\n        if(!course) {\n            return res.json({\n                success:false,\n                message:'could not find the course',\n                \n            })\n        };\n\n        const uid = new mongoose.Types.ObjectId(userId);\n        if(course.studentsEnrolled.includes(uid)) {\n            return res.status(200).json({\n                success:false,\n                message:'student is already enrolled',\n\n                \n            });\n        }\n    }catch(error){\n            console.error(error);\n            return res.status(500).json({\n                success:false,\n                message:error.message,\n            });\n    }\n\n    const amount = course.price;\n\n    const currency = \"INR\";\n\n    const options = {\n        amount: amount * 100,\n        currency,\n        receipt: Math.random(Date.now()).toString(),\n        notes:{\n            courseId: course_id,\n            userId,\n        }\n    };\n\n    try{\n            const paymentResponse = await instance.orders.create(options);\n            console.log(paymentResponse);\n            return res.status(200).json({\n                success:true,\n                courseName:course.courseName,\n                courseDescription:course.courseDescription,\n                thumbnail:course.thumbnail,\n                orderId:paymentResponse.id,\n                currency:paymentResponse.currency,\n                amount:paymentResponse.amount,\n                message:'',\n\n                \n            });\n    }\n    catch(error){\n            console.log(error);\n            res.json({\n                success:false,\n                message:\"could not initiate  order\",\n            });\n    }\n};\n\n\nexports.verifySignature = async (req,res) => {\n    const webhookSecret = \"12345678\";\n\n    const signature = req.headers[\"x-razorpay-signature\"];\n\n    const shasum = crypto.createHmac(\"sha256\", webhookSecret);\n\n    shasum.update(JSON.stringify(req.body));\n    const digest = shasum.digest(\"hex\");\n\n    if(signature === digest) {\n        console.log(\"payment is auhorised\");\n\n        const  {courseId, userId} = req.body.payload.payment.entity.notes;\n\n        try{\n            const enrolledCourse = await Course.findOneAndUpdate(\n                                                {_id: courseId},\n                                                {$push:{studentsEnrolled: userId}},\n                                                {new:true},\n            );\n\n            if(!enrolledCourse){\n                return res.status(500).json({\n                    success:false,\n                    message:'course not found',\n                });\n            }\n            console.log(enrolledCourse);\n\n            const enrolledStudent = await User.findOneAndUpdate(\n                                                {_id:userId},\n                                                {$push:{courses:courseId}},\n                                                {new:true},\n            );\n\n            console.log(enrolledStudent);\n\n            const emailResponse = await mailSender(\n                                enrolledStudent.email,\n                                \"Congratulaions\"\n            );\n\n            return res.status(200).json({\n                success:true,\n                message:'signature verified and course added',\n            });\n        }catch(error){\n            return res.status(500).json({\n                success:false,\n                message:error.message,\n            });\n\n        }\n    }\n    else {\n        return res.status(400).json({\n            success:false,\n            message:'Invalid request',\n        });\n    }\n};\n\n"],"file":"Payment.dev.js"}
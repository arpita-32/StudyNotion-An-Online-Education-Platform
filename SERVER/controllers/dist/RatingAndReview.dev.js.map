{"version":3,"sources":["RatingAndReview.js"],"names":["RatingAndReview","require","Course","mongoose","exports","createRating","req","res","userId","user","id","body","rating","review","courseId","findOne","_id","studentsEnrolled","$eleMatch","$eq","courseDetails","course","alreadyReviewed","status","json","success","message","create","ratingReview","findByIdAndUpdate","$push","ratingAndReviews","updatedCourseDetails","console","log","getAverageRating","aggregate","$match","Types","ObjectId","$group","averageRating","$avg","result","length","getAllRating","find","sort","populate","path","select","exec","allReviews","data"],"mappings":"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","sourcesContent":["const RatingAndReview = require(\"../models/RatingAndReview\");\nconst Course = require(\"../models/Course\");\nconst { default: mongoose } = require(\"mongoose\");\n\nexports.createRating = async(req,res) =>{\n    try{\n        const userId = req.user.id;\n\n        const {rating, review, courseId} = req.body;\n\n        const courseDetails = await Course.findOne(\n                                        {_id:courseId,\n                                        studentsEnrolled: {$eleMatch: {$eq: userId}},\n\n                                        });\n\n        const alreadyReviewed = await RatingAndReview.findOne({\n            user:userId,\n            course:courseId,\n        });\n\n        if(!alreadyReviewed) {\n            return res.status(403).json({\n                success: false,\n                message: 'course is already reviewed by the user',\n                \n            });\n        }\n\n        const ratingReview = await RatingAndReview.create({\n                                                rating ,review,\n                                                course:courseId,\n                                                user:userId,\n        });\n\n        const updatedCourseDetails = await Course.findByIdAndUpdate({_id:courseId},\n                                        {\n                                            $push:{\n                                                ratingAndReviews: ratingReview._id,\n                                            }\n                                        },\n                                        {new: true}\n        );\n\n        console.log(updatedCourseDetails);\n        return res.status(200).json({\n            success: true,\n            message: \"rating and review created successfully\",\n            ratingReview,\n        });\n\n    }catch(error){\n        console.log(error);\n            return res.status(500).json({\n                success: false,\n                message:error.message,\n            });\n    }\n}\n\nexports.getAverageRating = async(req , res) => {\n    try{\n\n        const courseId = req.body.courseId;\n\n        const result = await RatingAndReview.aggregate([\n            {\n                $match:{\n                    course: new mongoose.Types.ObjectId(courseId),\n                },\n            },\n            {\n                $group:{\n                    _id:null,\n                    averageRating:{ $avg:\"$rating\"},\n                }\n            }\n        ])\n\n        if(result.length > 0) {\n            return res.status(200).json({\n                success: true,\n                averageRating: result[0].averageRating,\n            });\n        }\n\n        return res.status(200).json({\n            success: true,\n            message: 'Average rating is 0 ,till now',\n            averageRating:0,\n            \n        });\n\n    }catch(error){\n        console.log(error);\n            return res.status(500).json({\n                success: false,\n                message:error.message,\n            });\n    }\n}\n\nexports.getAllRating = async (req,res) => {\n    try{\n        const allReviews = await RatingAndReview.find({})\n                                    .sort({rating: \"desc\"})\n                                    .populate({\n                                        path:\"user\",\n                                        select:\"firstName lastName email image\",\n                                    })\n                                    .populate({\n                                        path:\"course\",\n                                        select:\"courseName\",\n                                    })\n                                    .exec();\n                                    return res.status(200).json({\n                                        success: true,\n                                        message: 'All reviews fetched successfully',\n                                        data:allReviews,\n                                        \n                                    });\n\n    }\n    catch(error){\n        console.log(error);\n        return res.status(500).json({\n            success: false,\n            message:error.message,\n        });\n    }\n}"],"file":"RatingAndReview.dev.js"}
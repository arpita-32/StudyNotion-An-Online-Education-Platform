{"version":3,"sources":["Subsection.js"],"names":["SubSection","require","Section","exports","req","res","_req$body","sectionId","title","timeDuration","description","video","uploadDetails","updatedSection","regeneratorRuntime","async","_context","prev","next","body","uploadImageToCloudinary","videoFile","abrupt","createSubSection","json","success","message","awrap","process","env","FOLDER_NAME","sent","create","videoUrl","secure_url","findByIdAndUpdate","_id","$push","SubSectionDetails","new","status","t0","error","stop","subSectionId","subSection","undefined","files","concat","duration","save","findById","populate","console","log","data","_context2","deleteSubSection","_req$body3","_context3","$pull","findByIdAndDelete"],"mappings":"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","file":"Subsection.min.js","sourcesContent":["const SubSection = require(\"../models/SubSection\");\nconst Section = require(\"../models/Section\");\nconst {uploadImageToCloudinary} = require(\"../utils/imageUploader\");\n\nexports.createSubSection = async (req ,res) => {\n    try{\n        const {sectionId, title,timeDuration,description} = req.body;\n        const video = req.files.videoFile;\n        if(!sectionId || !title || !timeDuration || !video){\n            return res.status(400).json({\n                success:false,\n                message:'All fields are required',\n            });\n        }\n\n        const uploadDetails = await uploadImageToCloudinary(video,process.env.FOLDER_NAME);\n\n        const subSectionDetails = await SubSection.create({\n            title:title,\n            timeDuration:timeDuration,\n            description:description,\n            videoUrl:uploadDetails.secure_url,\n        })\n\n        const updatedSection = await Section.findByIdAndUpdate({_id:sectionId},\n            {$push:{\n                subSection:SubSectionDetails._id,\n\n            }},\n            {new:true}\n        );\n        return res.status(200).json({\n            success:true,\n            message:'sub Section created successfully',\n            updatedSection,\n            \n        });\n    }\n    catch(error){\n        return res.status(500).json({\n            success:false,\n            message:'Internal server error',\n            error:error.message,\n            \n        });\n    }\n}\n//update and delete section\nexports.updateSubSection = async (req, res) => {\n    try {\n      const { sectionId, subSectionId, title, description } = req.body\n      const subSection = await SubSection.findById(subSectionId)\n  \n      if (!subSection) {\n        return res.status(404).json({\n          success: false,\n          message: \"SubSection not found\",\n        })\n      }\n  \n      if (title !== undefined) {\n        subSection.title = title\n      }\n  \n      if (description !== undefined) {\n        subSection.description = description\n      }\n      if (req.files && req.files.video !== undefined) {\n        const video = req.files.video\n        const uploadDetails = await uploadImageToCloudinary(\n          video,\n          process.env.FOLDER_NAME\n        )\n        subSection.videoUrl = uploadDetails.secure_url\n        subSection.timeDuration = `${uploadDetails.duration}`\n      }\n  \n      await subSection.save()\n  \n      // find updated section and return it\n      const updatedSection = await Section.findById(sectionId).populate(\n        \"subSection\"\n      )\n  \n      console.log(\"updated section\", updatedSection)\n  \n      return res.json({\n        success: true,\n        message: \"Section updated successfully\",\n        data: updatedSection,\n      })\n    } catch (error) {\n      console.error(error)\n      return res.status(500).json({\n        success: false,\n        message: \"An error occurred while updating the section\",\n      })\n    }\n  }\n  \n  exports.deleteSubSection = async (req, res) => {\n    try {\n      const { subSectionId, sectionId } = req.body\n      await Section.findByIdAndUpdate(\n        { _id: sectionId },\n        {\n          $pull: {\n            subSection: subSectionId,\n          },\n        }\n      )\n      const subSection = await SubSection.findByIdAndDelete({ _id: subSectionId })\n  \n      if (!subSection) {\n        return res\n          .status(404)\n          .json({ success: false, message: \"SubSection not found\" })\n      }\n  \n      // find updated section and return it\n      const updatedSection = await Section.findById(sectionId).populate(\n        \"subSection\"\n      )\n  \n      return res.json({\n        success: true,\n        message: \"SubSection deleted successfully\",\n        data: updatedSection,\n      })\n    } catch (error) {\n      console.error(error)\n      return res.status(500).json({\n        success: false,\n        message: \"An error occurred while deleting the SubSection\",\n      })\n    }\n  }"]}
{"version":3,"sources":["ResetPassword.js"],"names":["User","require","mailSender","bcrypt","exports","resetPasswordToken","req","res","email","body","findOne","user","json","success","fals","message","token","crypto","randomUUID","findOneAndUpdate","resetPasswordExpires","Date","now","updatedDetails","url","console","log","status","resetPassword","password","confirmPassword","userDetails","hash","hashedPassword"],"mappings":"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","sourcesContent":["const User =  require(\"../models/User\");\nconst mailSender = require(\"../utils/mailSender\");\nconst bcrypt = require(\"bcrypt\");\n\n\nexports.resetPasswordToken = async (req, res) => {\n\n   try{\n    const email = req.body.email;\n    const user = await User.findOne({email:email});\n    if(!user) {\n        return res.json({\n            success:fals,\n            message:'your email is not registered with us'\n        });\n    }\n\n    const token = crypto.randomUUID();\n\n    const updatedDetails = await User.findOneAndUpdate(\n                                    {email:email},\n                                    {\n                                        token:token,\n                                        resetPasswordExpires: Date.now() + 5*60*1000,\n                                    },\n                                    {new:true}\n    );\n    const url = `http://localhost:3000/update-password/${token}`\n\n    await mailSender(email,\n        \"Password reset link\",\n        `Password reset link:${url}`\n    );\n\n    return res.json({\n        success:true,\n        message:'email sent successfully,please check email and change pwd',\n    });\n   }catch(error){\n    console.log(error);\n    return res.status(500).json({\n        success:false,\n        message:'something went wrong while reset',\n    });\n   }\n}\n\nexports.resetPassword = async(req,res) => {\n    try{\n        const {password,confirmPassword,token} = req.body;\n\n        if(password != confirmPassword){\n            return res.json({\n                success:false,\n                message:'password not matching',\n            });\n        }\n\n        if(!userDetails){\n            return res.json({\n                success:false,\n                message:'Token is invalid',\n            });\n        }\n\n        if( userDetails.resetPasswordExpires < Date.now()) {\n            return res.json({\n                success:false,\n                message:'token is expired ,please regenerate your token',\n            });\n        }\n\n        const hashedPassword = await bcrypt.hash(password, 10);\n\n        await User.findOneAndUpdate(\n            {token:token},\n            {password:hashedPassword},\n            {new:true},\n        );\n\n        return res.status(200).json({\n            success:true,\n            message:'password reset successfully',\n        });\n    }catch(error){\n        return res.status(500).json({\n            success:false,\n            message:'something went wrong',\n        });\n    }\n}"],"file":"ResetPassword.dev.js"}
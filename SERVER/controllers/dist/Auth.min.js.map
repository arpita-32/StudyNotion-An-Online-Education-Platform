{"version":3,"sources":["Auth.js"],"names":["bcrypt","require","User","jwt","mailSender","passwordUpdated","Profile","config","exports","req","res","body","firstName","email","confirmPassword","accountType","otp","lastName","password","status","send","success","message","json","findOne","OTP","find","sort","createdAt","limit","response","console","log","length","existingUser","hash","hashedPassword","approved","create","dateOfBirth","about","contactNumber","additionalDetails","_id","image","user","error","_context","t0","login","_req$body2","token","options","regeneratorRuntime","async","_context2","prev","next","gender","abrupt","profileDetails","awrap","populate","sent","compare","sign","id","process","env","JWT_SECRET","expiresIn","undefined","expires","Date","now","httpOnly","cookie","stop","sendotp","result","otpPayload","otpBody","_context3","otpGenerator","generate","upperCaseAlphabets","userDetails","_req$body3","oldPassword","newPassword","encryptedPassword","updatedUserDetails","emailResponse","_context4","findById","findByIdAndUpdate","new","concat","t1","checkUserPresent"],"mappings":"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","file":"Auth.min.js","sourcesContent":["const bcrypt = require(\"bcryptjs\")\nconst User = require(\"../models/User\")\nconst OTP = require(\"../models/OTP\")\nconst jwt = require(\"jsonwebtoken\")\nconst otpGenerator = require(\"otp-generator\")\nconst mailSender = require(\"../utils/mailSender\")\nconst { passwordUpdated } = require(\"../mail/passwordUpdate\")\nconst Profile = require(\"../models/Profile\")\nrequire(\"dotenv\").config()\n\n// Signup Controller for Registering USers\n\nexports.signup = async (req, res) => {\n  try {\n    // Destructure fields from the request body\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      confirmPassword,\n      accountType,\n      contactNumber,\n      otp,\n    } = req.body\n    // Check if All Details are there or not\n    if (\n      !firstName ||\n      !lastName ||\n      !email ||\n      !password ||\n      !confirmPassword ||\n      !otp\n    ) {\n      return res.status(403).send({\n        success: false,\n        message: \"All Fields are required\",\n      })\n    }\n    // Check if password and confirm password match\n    if (password !== confirmPassword) {\n      return res.status(400).json({\n        success: false,\n        message:\n          \"Password and Confirm Password do not match. Please try again.\",\n      })\n    }\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email })\n    if (existingUser) {\n      return res.status(400).json({\n        success: false,\n        message: \"User already exists. Please sign in to continue.\",\n      })\n    }\n\n    // Find the most recent OTP for the email\n    const response = await OTP.find({ email }).sort({ createdAt: -1 }).limit(1)\n    console.log(response)\n    if (response.length === 0) {\n      // OTP not found for the email\n      return res.status(400).json({\n        success: false,\n        message: \"The OTP is not valid\",\n      })\n    } else if (otp !== response[0].otp) {\n      // Invalid OTP\n      return res.status(400).json({\n        success: false,\n        message: \"The OTP is not valid\",\n      })\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10)\n\n    // Create the user\n    let approved = \"\"\n    approved === \"Instructor\" ? (approved = false) : (approved = true)\n\n    // Create the Additional Profile For User\n    const profileDetails = await Profile.create({\n      gender: null,\n      dateOfBirth: null,\n      about: null,\n      contactNumber: null,\n    })\n    const user = await User.create({\n      firstName,\n      lastName,\n      email,\n      contactNumber,\n      password: hashedPassword,\n      accountType: accountType,\n      approved: approved,\n      additionalDetails: profileDetails._id,\n      image: \"\",\n    })\n\n    return res.status(200).json({\n      success: true,\n      user,\n      message: \"User registered successfully\",\n    })\n  } catch (error) {\n    console.error(error)\n    return res.status(500).json({\n      success: false,\n      message: \"User cannot be registered. Please try again.\",\n    })\n  }\n}\n\n// Login controller for authenticating users\nexports.login = async (req, res) => {\n  try {\n    // Get email and password from request body\n    const { email, password } = req.body\n\n    // Check if email or password is missing\n    if (!email || !password) {\n      // Return 400 Bad Request status code with error message\n      return res.status(400).json({\n        success: false,\n        message: `Please Fill up All the Required Fields`,\n      })\n    }\n\n    // Find user with provided email\n    const user = await User.findOne({ email }).populate(\"additionalDetails\")\n\n    // If user not found with provided email\n    if (!user) {\n      // Return 401 Unauthorized status code with error message\n      return res.status(401).json({\n        success: false,\n        message: `User is not Registered with Us Please SignUp to Continue`,\n      })\n    }\n\n    // Generate JWT token and Compare Password\n    if (await bcrypt.compare(password, user.password)) {\n      const token = jwt.sign(\n        { email: user.email, id: user._id, accountType: user.accountType },\n        process.env.JWT_SECRET,\n        {\n          expiresIn: \"24h\",\n        }\n      )\n\n      // Save token to user document in database\n      user.token = token\n      user.password = undefined\n      // Set cookie for token and return success response\n      const options = {\n        expires: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n        httpOnly: true,\n      }\n      res.cookie(\"token\", token, options).status(200).json({\n        success: true,\n        token,\n        user,\n        message: `User Login Success`,\n      })\n    } else {\n      return res.status(401).json({\n        success: false,\n        message: `Password is incorrect`,\n      })\n    }\n  } catch (error) {\n    console.error(error)\n    // Return 500 Internal Server Error status code with error message\n    return res.status(500).json({\n      success: false,\n      message: `Login Failure Please Try Again`,\n    })\n  }\n}\n// Send OTP For Email Verification\nexports.sendotp = async (req, res) => {\n  try {\n    const { email } = req.body\n\n    // Check if user is already present\n    // Find user with provided email\n    const checkUserPresent = await User.findOne({ email })\n    // to be used in case of signup\n\n    // If user found with provided email\n    if (checkUserPresent) {\n      // Return 401 Unauthorized status code with error message\n      return res.status(401).json({\n        success: false,\n        message: `User is Already Registered`,\n      })\n    }\n\n    var otp = otpGenerator.generate(6, {\n      upperCaseAlphabets: false,\n      lowerCaseAlphabets: false,\n      specialChars: false,\n    })\n    const result = await OTP.findOne({ otp: otp })\n    console.log(\"Result is Generate OTP Func\")\n    console.log(\"OTP\", otp)\n    console.log(\"Result\", result)\n    while (result) {\n      otp = otpGenerator.generate(6, {\n        upperCaseAlphabets: false,\n      })\n    }\n    const otpPayload = { email, otp }\n    const otpBody = await OTP.create(otpPayload)\n    console.log(\"OTP Body\", otpBody)\n    res.status(200).json({\n      success: true,\n      message: `OTP Sent Successfully`,\n      otp,\n    })\n  } catch (error) {\n    console.log(error.message)\n    return res.status(500).json({ success: false, error: error.message })\n  }\n}\n\n// Controller for Changing Password\nexports.changePassword = async (req, res) => {\n  try {\n    // Get user data from req.user\n    const userDetails = await User.findById(req.user.id)\n\n    // Get old password, new password, and confirm new password from req.body\n    const { oldPassword, newPassword } = req.body\n\n    // Validate old password\n    const isPasswordMatch = await bcrypt.compare(\n      oldPassword,\n      userDetails.password\n    )\n    if (!isPasswordMatch) {\n      // If old password does not match, return a 401 (Unauthorized) error\n      return res\n        .status(401)\n        .json({ success: false, message: \"The password is incorrect\" })\n    }\n\n    // Update password\n    const encryptedPassword = await bcrypt.hash(newPassword, 10)\n    const updatedUserDetails = await User.findByIdAndUpdate(\n      req.user.id,\n      { password: encryptedPassword },\n      { new: true }\n    )\n\n    // Send notification email\n    try {\n      const emailResponse = await mailSender(\n        updatedUserDetails.email,\n        \"Password for your account has been updated\",\n        passwordUpdated(\n          updatedUserDetails.email,\n          `Password updated successfully for ${updatedUserDetails.firstName} ${updatedUserDetails.lastName}`\n        )\n      )\n      console.log(\"Email sent successfully:\", emailResponse.response)\n    } catch (error) {\n      // If there's an error sending the email, log the error and return a 500 (Internal Server Error) error\n      console.error(\"Error occurred while sending email:\", error)\n      return res.status(500).json({\n        success: false,\n        message: \"Error occurred while sending email\",\n        error: error.message,\n      })\n    }\n\n    // Return success response\n    return res\n      .status(200)\n      .json({ success: true, message: \"Password updated successfully\" })\n  } catch (error) {\n    // If there's an error updating the password, log the error and return a 500 (Internal Server Error) error\n    console.error(\"Error occurred while updating password:\", error)\n    return res.status(500).json({\n      success: false,\n      message: \"Error occurred while updating password\",\n      error: error.message,\n    })\n  }\n}"]}
{"version":3,"sources":["Auth.js"],"names":["User","require","OTP","bcrypt","config","exports","sendOTP","req","res","email","otp","result","otpPayload","otpBody","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","sent","abrupt","status","json","success","message","otpGenerator","generate","upperCaseAlphabets","specialChars","console","log","lowerCaseAlphabets","create","t0","stop","lastName","password","accountType","contactNumber","firstName","confirmPassword","find","sort","createdAt","limit","recentOtp","length","hash","hashedPassword","Profile","gender","dateOfBirth","about","profileDetails","additionalDetails","_context2","login","_req$body2","user","payload","token","options","_context3","existingUser","populate","compare","id","_id","jwt","sign","process","env","JWT_SECRET","undefined","Date","now","httpOnly","cookie","changePassword","_context4"],"mappings":"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","file":"Auth.min.js","sourcesContent":["const User = require(\"../models/User\");\nconst OTP  = require(\"../models/OTP\");\nconst otpGenerator = require(\"otp-generator\");\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nrequire(\"dotenv\").config();\n\n//sendOTP\n\nexports.sendOTP = async(req,res) => {\n    //fetch email from req.body\n    try{\n    const {email} = req.body;\n\n    const checkUserPresent = await User.findOne({email});\n\n    if(checkUserPresent) {\n        return res.status(401).json({\n            success:false,\n            message:'User already registered',\n        })\n    }\n\n    var otp = otpGenerator.generate(6, {\n        upperCaseAlphabets:false,\n        lowerCaseAlphabets:false,\n        specialChars:false,\n    });\n    console.log(\"OTP generated:\", otp);\n\n    let result = await OTP.findOne({otp: otp});\n\n    while(result) {\n        otp =  otpGenerator.generate(6, {\n            upperCaseAlphabets:false,\n            lowerCaseAlphabets:false,\n            specialChars:false,\n        }); \n        result = await OTP.findOne({otp: otp});\n    }\n\n    const otpPayload = {email,otp};\n\n    const otpBody = await OTP.create(otpPayload);\n    console.log(otpBody);\n\n    res.status(200).json({\n        success:true,\n        message:'otp sent successfully',\n        otp,\n    })\n    }\n    catch(error){\n        console.log(error);\n        return res.status(500).json({\n            success:false,\n            message:error.message,\n            \n        })\n    }\n};\n\nexports.signUp = async (req , res) => {\n    try{\n        const{\n            firstName,\n            lastName,\n            email,\n            password,\n            confirmPassword,\n            accountType,\n            contactNumber,\n            otp\n        } = req.body;\n    \n        if(!firstName || !lastName || !email || !password || !confirmPassword || !otp){\n            return res.status(403).json({\n                success:false,\n                message:\"All fields are required\",\n            });\n    \n        }\n        if(password !== confirmPassword){\n            return res.status(400).json({\n                success:false,\n                message:'Password and confirmpassword value does not match,please try again',\n            });\n        }\n    \n        const existingUser = await User.findOne({email});\n        if(existingUser){\n            return res.status(400).json({\n                success:false,\n                message:\"User is already registered\",\n            })\n        }\n    \n        const recentOtp = await OTP.find({email}).sort({createdAt:-1}).limit(1);\n        console.log(recentOtp);\n    \n        if(recentOtp.length == 0){\n            return res.status(400).json({\n                success:false,\n                message:\"otp found\",\n            })\n        } else if(otp !== recentOtp.otp){\n            return res.status(400).json({\n                success:false,\n                message:\"Invalid otp\",\n            })\n        }\n    \n        const hashedPassword = await bcrypt.hash(password, 10);\n    \n        const profileDetails = await Profile.create({\n            gender:null,\n            dateOfBirth:null,\n            about:null,\n            contactNumber:null,\n        });\n    \n        const user = await User.create({\n            firstName,\n            lastName,\n            email,\n            contactNumber,\n            password:hashedPassword,\n            accountType,\n            additionalDetails:profileDetails._id,\n            image:`https://api.dicebear.com/5.x/initials/svg?seed=${firstName} ${lastName}`,\n        })\n        return res.status(4200).json({\n            success:true,\n            message:'User is registered successfully',\n        });\n    }catch(error){\n            console.log(error)\n            return res.status(500).json({\n                success:false,\n                message:'User cannot be registered .please try again',\n            });\n    }\n};\n\nexports.login = async(req, res) =>{\n    try{\n        const {email,password} = req.body;\n\n        if(!email || !password){\n            return res.status(403).json({\n                success:false,\n                message:'all fields are required please try again',\n            });\n        }\n\n        const user = await User.findOne({email}).populate(\"additionalDetails\");\n        if(!user) {\n            return res.status(401).json({\n                success:false,\n                message:'User is not  registered .please signup first',\n            });\n        }\n        if(await bcrypt.compare(password, user.password)){\n            const payload = {\n                email:user.email,\n                id: user._id,\n                accountType:user.accountType,\n            }\n            const token = jwt.sign(payload, process.env.JWT_SECRET,{\n                expiresIn:\"2h\",\n            });\n            user.token = token;\n            user.password = undefined;\n\n            const options={\n                expires: new Date(Date.now() + 3*24*60*60*100),\n                httpOnly:true,\n            }\n            res.cookie(\"token\", token, options).status(200).json({\n                success:true,\n                token,\n                user,message:'logged in successfully'\n            })\n        }\n        else{\n            return res.status(401).json({\n                success:false,\n                message:'pssword is incorrect',\n            });\n        }\n    }catch(error){\n        console.log(error)\n            return res.status(500).json({\n                success:false,\n                message:'User is not registered .please signup',\n            });\n    }\n};\n\nexports.changePassword = async (req,res) => {\n    try{\n\n    }catch(error){\n\n    }\n}"]}
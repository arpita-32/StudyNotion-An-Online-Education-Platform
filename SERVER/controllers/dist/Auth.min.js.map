{"version":3,"sources":["Auth.js"],"names":["User","require","OTP","exports","otpGenerator","res","email","otp","result","otpPayload","otpBody","regeneratorRuntime","async","_context","prev","next","sendOTP","req","body","awrap","findOne","sent","abrupt","status","json","success","generate","upperCaseAlphabets","lowerCaseAlphabets","checkUserPresent","console","log","message","specialChars","create","t0","stop","firstName","lastName","password","confirmPassword","accountType","find","sort","createdAt","limit","recentOtp","bcrypt","hash","hashedPassword","contactNumber","additionalDetails"],"mappings":"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","file":"Auth.min.js","sourcesContent":["const User = require(\"../models/User\");\nconst OTP  = require(\"../models/OTP\");\nconst otpGenerator = require(\"otp-generator\");\n\n//sendOTP\n\nexports.sendOTP = async(req,res) => {\n    //fetch email from req.body\n    try{\n    const {email} = req.body;\n\n    const checkUserPresent = await User.findOne({email});\n\n    if(checkUserPresent) {\n        return res.status(401).json({\n            success:false,\n            message:'User already registered',\n        })\n    }\n\n    var otp = otpGenerator.generate(6, {\n        upperCaseAlphabets:false,\n        lowerCaseAlphabets:false,\n        specialChars:false,\n    });\n    console.log(\"OTP generated:\", otp);\n\n    let result = await OTP.findOne({otp: otp});\n\n    while(result) {\n        otp =  otpGenerator.generate(6, {\n            upperCaseAlphabets:false,\n            lowerCaseAlphabets:false,\n            specialChars:false,\n        }); \n        result = await OTP.findOne({otp: otp});\n    }\n\n    const otpPayload = {email,otp};\n\n    const otpBody = await OTP.create(otpPayload);\n    console.log(otpBody);\n\n    res.status(200).json({\n        success:true,\n        message:'otp sent successfully',\n        otp,\n    })\n    }\n    catch(error){\n        console.log(error);\n        return res.status(500).json({\n            success:false,\n            message:error.message,\n            \n        })\n    }\n};\n\nexports.signUp = async (req , res) => {\n    const{\n        firstName,\n        lastName,\n        email,\n        password,\n        confirmPassword,\n        accountType,\n        contactNumber,\n        otp\n    } = req.body;\n\n    if(!firstName || !lastName || !email || !password || !confirmPassword || !otp){\n        return res.status(403).json({\n            success:false,\n            message:\"All fields are required\",\n        });\n\n    }\n    if(password !== confirmPassword){\n        return res.status(400).json({\n            success:false,\n            message:'Password and confirmpassword value does not match,please try again',\n        });\n    }\n\n    const existingUser = await User.findOne({email});\n    if(existingUser){\n        return res.status(400).json({\n            success:false,\n            message:\"User is already registered\",\n        })\n    }\n\n    const recentOtp = await OTP.find({email}).sort({createdAt:-1}).limit(1);\n    console.log(recentOtp);\n\n    if(recentOtp.length == 0){\n        return res.status(400).json({\n            success:false,\n            message:\"otp found\",\n        })\n    } else if(otp !== recentOtp.otp){\n        return res.status(400).json({\n            success:false,\n            message:\"Invalid otp\",\n        })\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const user = await User.create({\n        firstName,\n        lastName,\n        email,\n        contactNumber,\n        password:hashedPassword,\n        accountType,\n        additionalDetails\n    })\n}"]}
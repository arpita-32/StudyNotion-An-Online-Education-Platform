{"version":3,"sources":["Auth.js"],"names":["User","require","OTP","otpGenerator","bcrypt","jwt","config","exports","sendOTP","req","res","email","body","findOne","checkUserPresent","status","json","success","message","otp","generate","upperCaseAlphabets","lowerCaseAlphabets","specialChars","console","log","result","otpPayload","create","otpBody","signUp","firstName","lastName","password","confirmPassword","accountType","contactNumber","existingUser","find","sort","createdAt","limit","recentOtp","length","hash","hashedPassword","Profile","gender","dateOfBirth","about","profileDetails","additionalDetails","_id","image","user","login","populate","compare","payload","id","token","sign","process","env","JWT_SECRET","expiresIn","undefined","options","expires","Date","now","httpOnly","cookie","changePassword","error"],"mappings":"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","sourcesContent":["const User = require(\"../models/User\");\nconst OTP  = require(\"../models/OTP\");\nconst otpGenerator = require(\"otp-generator\");\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nrequire(\"dotenv\").config();\n\n//sendOTP\n\nexports.sendOTP = async(req,res) => {\n    //fetch email from req.body\n    try{\n    const {email} = req.body;\n\n    const checkUserPresent = await User.findOne({email});\n\n    if(checkUserPresent) {\n        return res.status(401).json({\n            success:false,\n            message:'User already registered',\n        })\n    }\n\n    var otp = otpGenerator.generate(6, {\n        upperCaseAlphabets:false,\n        lowerCaseAlphabets:false,\n        specialChars:false,\n    });\n    console.log(\"OTP generated:\", otp);\n\n    let result = await OTP.findOne({otp: otp});\n\n    while(result) {\n        otp =  otpGenerator.generate(6, {\n            upperCaseAlphabets:false,\n            lowerCaseAlphabets:false,\n            specialChars:false,\n        }); \n        result = await OTP.findOne({otp: otp});\n    }\n\n    const otpPayload = {email,otp};\n\n    const otpBody = await OTP.create(otpPayload);\n    console.log(otpBody);\n\n    res.status(200).json({\n        success:true,\n        message:'otp sent successfully',\n        otp,\n    })\n    }\n    catch(error){\n        console.log(error);\n        return res.status(500).json({\n            success:false,\n            message:error.message,\n            \n        })\n    }\n};\n\nexports.signUp = async (req , res) => {\n    try{\n        const{\n            firstName,\n            lastName,\n            email,\n            password,\n            confirmPassword,\n            accountType,\n            contactNumber,\n            otp\n        } = req.body;\n    \n        if(!firstName || !lastName || !email || !password || !confirmPassword || !otp){\n            return res.status(403).json({\n                success:false,\n                message:\"All fields are required\",\n            });\n    \n        }\n        if(password !== confirmPassword){\n            return res.status(400).json({\n                success:false,\n                message:'Password and confirmpassword value does not match,please try again',\n            });\n        }\n    \n        const existingUser = await User.findOne({email});\n        if(existingUser){\n            return res.status(400).json({\n                success:false,\n                message:\"User is already registered\",\n            })\n        }\n    \n        const recentOtp = await OTP.find({email}).sort({createdAt:-1}).limit(1);\n        console.log(recentOtp);\n    \n        if(recentOtp.length == 0){\n            return res.status(400).json({\n                success:false,\n                message:\"otp found\",\n            })\n        } else if(otp !== recentOtp.otp){\n            return res.status(400).json({\n                success:false,\n                message:\"Invalid otp\",\n            })\n        }\n    \n        const hashedPassword = await bcrypt.hash(password, 10);\n    \n        const profileDetails = await Profile.create({\n            gender:null,\n            dateOfBirth:null,\n            about:null,\n            contactNumber:null,\n        });\n    \n        const user = await User.create({\n            firstName,\n            lastName,\n            email,\n            contactNumber,\n            password:hashedPassword,\n            accountType,\n            additionalDetails:profileDetails._id,\n            image:`https://api.dicebear.com/5.x/initials/svg?seed=${firstName} ${lastName}`,\n        })\n        return res.status(4200).json({\n            success:true,\n            message:'User is registered successfully',\n        });\n    }catch(error){\n            console.log(error)\n            return res.status(500).json({\n                success:false,\n                message:'User cannot be registered .please try again',\n            });\n    }\n};\n\nexports.login = async(req, res) =>{\n    try{\n        const {email,password} = req.body;\n\n        if(!email || !password){\n            return res.status(403).json({\n                success:false,\n                message:'all fields are required please try again',\n            });\n        }\n\n        const user = await User.findOne({email}).populate(\"additionalDetails\");\n        if(!user) {\n            return res.status(401).json({\n                success:false,\n                message:'User is not  registered .please signup first',\n            });\n        }\n        if(await bcrypt.compare(password, user.password)){\n            const payload = {\n                email:user.email,\n                id: user._id,\n                accountType:user.accountType,\n            }\n            const token = jwt.sign(payload, process.env.JWT_SECRET,{\n                expiresIn:\"2h\",\n            });\n            user.token = token;\n            user.password = undefined;\n\n            const options={\n                expires: new Date(Date.now() + 3*24*60*60*100),\n                httpOnly:true,\n            }\n            res.cookie(\"token\", token, options).status(200).json({\n                success:true,\n                token,\n                user,message:'logged in successfully'\n            })\n        }\n        else{\n            return res.status(401).json({\n                success:false,\n                message:'pssword is incorrect',\n            });\n        }\n    }catch(error){\n        console.log(error)\n            return res.status(500).json({\n                success:false,\n                message:'User is not registered .please signup',\n            });\n    }\n};\n\nexports.changePassword = async (req,res) => {\n    try{\n\n    }catch(error){\n\n    }\n}"],"file":"Auth.dev.js"}
{"version":3,"sources":["Auth.js"],"names":["bcrypt","require","User","OTP","jwt","otpGenerator","mailSender","passwordUpdated","Profile","config","exports","signup","req","res","body","firstName","lastName","email","password","confirmPassword","accountType","contactNumber","otp","status","send","success","message","json","findOne","existingUser","find","sort","createdAt","limit","response","console","log","length","hash","hashedPassword","approved","create","gender","dateOfBirth","about","profileDetails","additionalDetails","_id","image","user","error","login","populate","compare","token","sign","id","process","env","JWT_SECRET","expiresIn","undefined","options","expires","Date","now","httpOnly","cookie","sendotp","checkUserPresent","generate","upperCaseAlphabets","lowerCaseAlphabets","specialChars","result","otpPayload","otpBody","changePassword","findById","userDetails","oldPassword","newPassword","isPasswordMatch","encryptedPassword","findByIdAndUpdate","updatedUserDetails","emailResponse"],"mappings":"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","sourcesContent":["const bcrypt = require(\"bcryptjs\")\nconst User = require(\"../models/User\")\nconst OTP = require(\"../models/OTP\")\nconst jwt = require(\"jsonwebtoken\")\nconst otpGenerator = require(\"otp-generator\")\nconst mailSender = require(\"../utils/mailSender\")\nconst { passwordUpdated } = require(\"../mail/passwordUpdate\")\nconst Profile = require(\"../models/Profile\")\nrequire(\"dotenv\").config()\n\n// Signup Controller for Registering USers\n\nexports.signup = async (req, res) => {\n  try {\n    // Destructure fields from the request body\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      confirmPassword,\n      accountType,\n      contactNumber,\n      otp,\n    } = req.body\n    // Check if All Details are there or not\n    if (\n      !firstName ||\n      !lastName ||\n      !email ||\n      !password ||\n      !confirmPassword ||\n      !otp\n    ) {\n      return res.status(403).send({\n        success: false,\n        message: \"All Fields are required\",\n      })\n    }\n    // Check if password and confirm password match\n    if (password !== confirmPassword) {\n      return res.status(400).json({\n        success: false,\n        message:\n          \"Password and Confirm Password do not match. Please try again.\",\n      })\n    }\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email })\n    if (existingUser) {\n      return res.status(400).json({\n        success: false,\n        message: \"User already exists. Please sign in to continue.\",\n      })\n    }\n\n    // Find the most recent OTP for the email\n    const response = await OTP.find({ email }).sort({ createdAt: -1 }).limit(1)\n    console.log(response)\n    if (response.length === 0) {\n      // OTP not found for the email\n      return res.status(400).json({\n        success: false,\n        message: \"The OTP is not valid\",\n      })\n    } else if (otp !== response[0].otp) {\n      // Invalid OTP\n      return res.status(400).json({\n        success: false,\n        message: \"The OTP is not valid\",\n      })\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10)\n\n    // Create the user\n    let approved = \"\"\n    approved === \"Instructor\" ? (approved = false) : (approved = true)\n\n    // Create the Additional Profile For User\n    const profileDetails = await Profile.create({\n      gender: null,\n      dateOfBirth: null,\n      about: null,\n      contactNumber: null,\n    })\n    const user = await User.create({\n      firstName,\n      lastName,\n      email,\n      contactNumber,\n      password: hashedPassword,\n      accountType: accountType,\n      approved: approved,\n      additionalDetails: profileDetails._id,\n      image: \"\",\n    })\n\n    return res.status(200).json({\n      success: true,\n      user,\n      message: \"User registered successfully\",\n    })\n  } catch (error) {\n    console.error(error)\n    return res.status(500).json({\n      success: false,\n      message: \"User cannot be registered. Please try again.\",\n    })\n  }\n}\n\n// Login controller for authenticating users\nexports.login = async (req, res) => {\n  try {\n    // Get email and password from request body\n    const { email, password } = req.body\n\n    // Check if email or password is missing\n    if (!email || !password) {\n      // Return 400 Bad Request status code with error message\n      return res.status(400).json({\n        success: false,\n        message: `Please Fill up All the Required Fields`,\n      })\n    }\n\n    // Find user with provided email\n    const user = await User.findOne({ email }).populate(\"additionalDetails\")\n\n    // If user not found with provided email\n    if (!user) {\n      // Return 401 Unauthorized status code with error message\n      return res.status(401).json({\n        success: false,\n        message: `User is not Registered with Us Please SignUp to Continue`,\n      })\n    }\n\n    // Generate JWT token and Compare Password\n    if (await bcrypt.compare(password, user.password)) {\n      const token = jwt.sign(\n        { email: user.email, id: user._id, accountType: user.accountType },\n        process.env.JWT_SECRET,\n        {\n          expiresIn: \"24h\",\n        }\n      )\n\n      // Save token to user document in database\n      user.token = token\n      user.password = undefined\n      // Set cookie for token and return success response\n      const options = {\n        expires: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n        httpOnly: true,\n      }\n      res.cookie(\"token\", token, options).status(200).json({\n        success: true,\n        token,\n        user,\n        message: `User Login Success`,\n      })\n    } else {\n      return res.status(401).json({\n        success: false,\n        message: `Password is incorrect`,\n      })\n    }\n  } catch (error) {\n    console.error(error)\n    // Return 500 Internal Server Error status code with error message\n    return res.status(500).json({\n      success: false,\n      message: `Login Failure Please Try Again`,\n    })\n  }\n}\n// Send OTP For Email Verification\nexports.sendotp = async (req, res) => {\n  try {\n    const { email } = req.body\n\n    // Check if user is already present\n    // Find user with provided email\n    const checkUserPresent = await User.findOne({ email })\n    // to be used in case of signup\n\n    // If user found with provided email\n    if (checkUserPresent) {\n      // Return 401 Unauthorized status code with error message\n      return res.status(401).json({\n        success: false,\n        message: `User is Already Registered`,\n      })\n    }\n\n    var otp = otpGenerator.generate(6, {\n      upperCaseAlphabets: false,\n      lowerCaseAlphabets: false,\n      specialChars: false,\n    })\n    const result = await OTP.findOne({ otp: otp })\n    console.log(\"Result is Generate OTP Func\")\n    console.log(\"OTP\", otp)\n    console.log(\"Result\", result)\n    while (result) {\n      otp = otpGenerator.generate(6, {\n        upperCaseAlphabets: false,\n      })\n    }\n    const otpPayload = { email, otp }\n    const otpBody = await OTP.create(otpPayload)\n    console.log(\"OTP Body\", otpBody)\n    res.status(200).json({\n      success: true,\n      message: `OTP Sent Successfully`,\n      otp,\n    })\n  } catch (error) {\n    console.log(error.message)\n    return res.status(500).json({ success: false, error: error.message })\n  }\n}\n\n// Controller for Changing Password\nexports.changePassword = async (req, res) => {\n  try {\n    // Get user data from req.user\n    const userDetails = await User.findById(req.user.id)\n\n    // Get old password, new password, and confirm new password from req.body\n    const { oldPassword, newPassword } = req.body\n\n    // Validate old password\n    const isPasswordMatch = await bcrypt.compare(\n      oldPassword,\n      userDetails.password\n    )\n    if (!isPasswordMatch) {\n      // If old password does not match, return a 401 (Unauthorized) error\n      return res\n        .status(401)\n        .json({ success: false, message: \"The password is incorrect\" })\n    }\n\n    // Update password\n    const encryptedPassword = await bcrypt.hash(newPassword, 10)\n    const updatedUserDetails = await User.findByIdAndUpdate(\n      req.user.id,\n      { password: encryptedPassword },\n      { new: true }\n    )\n\n    // Send notification email\n    try {\n      const emailResponse = await mailSender(\n        updatedUserDetails.email,\n        \"Password for your account has been updated\",\n        passwordUpdated(\n          updatedUserDetails.email,\n          `Password updated successfully for ${updatedUserDetails.firstName} ${updatedUserDetails.lastName}`\n        )\n      )\n      console.log(\"Email sent successfully:\", emailResponse.response)\n    } catch (error) {\n      // If there's an error sending the email, log the error and return a 500 (Internal Server Error) error\n      console.error(\"Error occurred while sending email:\", error)\n      return res.status(500).json({\n        success: false,\n        message: \"Error occurred while sending email\",\n        error: error.message,\n      })\n    }\n\n    // Return success response\n    return res\n      .status(200)\n      .json({ success: true, message: \"Password updated successfully\" })\n  } catch (error) {\n    // If there's an error updating the password, log the error and return a 500 (Internal Server Error) error\n    console.error(\"Error occurred while updating password:\", error)\n    return res.status(500).json({\n      success: false,\n      message: \"Error occurred while updating password\",\n      error: error.message,\n    })\n  }\n}"],"file":"Auth.dev.js"}
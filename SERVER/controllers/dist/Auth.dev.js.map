{"version":3,"sources":["Auth.js"],"names":["User","require","OTP","otpGenerator","exports","sendOTP","req","res","email","body","findOne","checkUserPresent","status","json","success","message","otp","generate","upperCaseAlphabets","lowerCaseAlphabets","specialChars","console","log","result","otpPayload","create","otpBody","signUp","firstName","lastName","password","confirmPassword","accountType","contactNumber","existingUser","find","sort","createdAt","limit","recentOtp","length","bcrypt","hash","hashedPassword","additionalDetails","user"],"mappings":"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","sourcesContent":["const User = require(\"../models/User\");\nconst OTP  = require(\"../models/OTP\");\nconst otpGenerator = require(\"otp-generator\");\n\n//sendOTP\n\nexports.sendOTP = async(req,res) => {\n    //fetch email from req.body\n    try{\n    const {email} = req.body;\n\n    const checkUserPresent = await User.findOne({email});\n\n    if(checkUserPresent) {\n        return res.status(401).json({\n            success:false,\n            message:'User already registered',\n        })\n    }\n\n    var otp = otpGenerator.generate(6, {\n        upperCaseAlphabets:false,\n        lowerCaseAlphabets:false,\n        specialChars:false,\n    });\n    console.log(\"OTP generated:\", otp);\n\n    let result = await OTP.findOne({otp: otp});\n\n    while(result) {\n        otp =  otpGenerator.generate(6, {\n            upperCaseAlphabets:false,\n            lowerCaseAlphabets:false,\n            specialChars:false,\n        }); \n        result = await OTP.findOne({otp: otp});\n    }\n\n    const otpPayload = {email,otp};\n\n    const otpBody = await OTP.create(otpPayload);\n    console.log(otpBody);\n\n    res.status(200).json({\n        success:true,\n        message:'otp sent successfully',\n        otp,\n    })\n    }\n    catch(error){\n        console.log(error);\n        return res.status(500).json({\n            success:false,\n            message:error.message,\n            \n        })\n    }\n};\n\nexports.signUp = async (req , res) => {\n    const{\n        firstName,\n        lastName,\n        email,\n        password,\n        confirmPassword,\n        accountType,\n        contactNumber,\n        otp\n    } = req.body;\n\n    if(!firstName || !lastName || !email || !password || !confirmPassword || !otp){\n        return res.status(403).json({\n            success:false,\n            message:\"All fields are required\",\n        });\n\n    }\n    if(password !== confirmPassword){\n        return res.status(400).json({\n            success:false,\n            message:'Password and confirmpassword value does not match,please try again',\n        });\n    }\n\n    const existingUser = await User.findOne({email});\n    if(existingUser){\n        return res.status(400).json({\n            success:false,\n            message:\"User is already registered\",\n        })\n    }\n\n    const recentOtp = await OTP.find({email}).sort({createdAt:-1}).limit(1);\n    console.log(recentOtp);\n\n    if(recentOtp.length == 0){\n        return res.status(400).json({\n            success:false,\n            message:\"otp found\",\n        })\n    } else if(otp !== recentOtp.otp){\n        return res.status(400).json({\n            success:false,\n            message:\"Invalid otp\",\n        })\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const user = await User.create({\n        firstName,\n        lastName,\n        email,\n        contactNumber,\n        password:hashedPassword,\n        accountType,\n        additionalDetails\n    })\n}"],"file":"Auth.dev.js"}
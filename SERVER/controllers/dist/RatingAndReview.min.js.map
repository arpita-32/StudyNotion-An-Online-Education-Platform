{"version":3,"sources":["RatingAndReview.js"],"names":["RatingAndReview","require","Course","exports","req","res","userId","_req$body","rating","review","courseId","ratingReview","updatedCourseDetails","regeneratorRuntime","async","_context","prev","next","user","id","body","awrap","findOne","_id","studentsEnrolled","$eleMatch","$eq","sent","course","abrupt","json","create","findByIdAndUpdate","$push","ratingAndReviews","new","console","log","status","success","message","t0","stop","result","_context2","aggregate","$match","mongoose","Types","ObjectId","$group","length","averageRating","getAllRating","allReviews","_context3","find","populate","path","select","exec","data"],"mappings":"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","file":"RatingAndReview.min.js","sourcesContent":["const RatingAndReview = require(\"../models/RatingAndReview\");\nconst Course = require(\"../models/Course\");\nconst { default: mongoose } = require(\"mongoose\");\n\nexports.createRating = async(req,res) =>{\n    try{\n        const userId = req.user.id;\n\n        const {rating, review, courseId} = req.body;\n\n        const courseDetails = await Course.findOne(\n                                        {_id:courseId,\n                                        studentsEnrolled: {$eleMatch: {$eq: userId}},\n\n                                        });\n\n        const alreadyReviewed = await RatingAndReview.findOne({\n            user:userId,\n            course:courseId,\n        });\n\n        if(!alreadyReviewed) {\n            return res.status(403).json({\n                success: false,\n                message: 'course is already reviewed by the user',\n                \n            });\n        }\n\n        const ratingReview = await RatingAndReview.create({\n                                                rating ,review,\n                                                course:courseId,\n                                                user:userId,\n        });\n\n        const updatedCourseDetails = await Course.findByIdAndUpdate({_id:courseId},\n                                        {\n                                            $push:{\n                                                ratingAndReviews: ratingReview._id,\n                                            }\n                                        },\n                                        {new: true}\n        );\n\n        console.log(updatedCourseDetails);\n        return res.status(200).json({\n            success: true,\n            message: \"rating and review created successfully\",\n            ratingReview,\n        });\n\n    }catch(error){\n        console.log(error);\n            return res.status(500).json({\n                success: false,\n                message:error.message,\n            });\n    }\n}\n\nexports.getAverageRating = async(req , res) => {\n    try{\n\n        const courseId = req.body.courseId;\n\n        const result = await RatingAndReview.aggregate([\n            {\n                $match:{\n                    course: new mongoose.Types.ObjectId(courseId),\n                },\n            },\n            {\n                $group:{\n                    _id:null,\n                    averageRating:{ $avg:\"$rating\"},\n                }\n            }\n        ])\n\n        if(result.length > 0) {\n            return res.status(200).json({\n                success: true,\n                averageRating: result[0].averageRating,\n            });\n        }\n\n        return res.status(200).json({\n            success: true,\n            message: 'Average rating is 0 ,till now',\n            averageRating:0,\n            \n        });\n\n    }catch(error){\n        console.log(error);\n            return res.status(500).json({\n                success: false,\n                message:error.message,\n            });\n    }\n}\n\nexports.getAllRating = async (req,res) => {\n    try{\n        const allReviews = await RatingAndReview.find({})\n                                    .sort({rating: \"desc\"})\n                                    .populate({\n                                        path:\"user\",\n                                        select:\"firstName lastName email image\",\n                                    })\n                                    .populate({\n                                        path:\"course\",\n                                        select:\"courseName\",\n                                    })\n                                    .exec();\n                                    return res.status(200).json({\n                                        success: true,\n                                        message: 'All reviews fetched successfully',\n                                        data:allReviews,\n                                        \n                                    });\n\n    }\n    catch(error){\n        console.log(error);\n        return res.status(500).json({\n            success: false,\n            message:error.message,\n        });\n    }\n}"]}
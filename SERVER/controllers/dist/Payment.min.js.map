{"version":3,"sources":["Payment.js"],"names":["require","instance","Course","User","courseEnrollmentEmail","exports","capturePayment","req","res","course_id","userId","course","uid","amount","options","paymentResponse","regeneratorRuntime","async","_context","prev","next","body","mailSender","id","abrupt","success","awrap","user","findById","sent","json","message","mongoose","Types","ObjectId","studentsEnrolled","includes","status","t0","error","price","currency","Math","now","notes","courseId","orders","create","log","courseName","courseDescription","thumbnail","orderId","t1","console","stop","signature","headers","shasum","crypto","createHmac","update","JSON","stringify","digest","payload","payment","entity","findOneAndUpdate","_id","$push","new","enrolledCourse","courses","enrolledStudent","email"],"mappings":"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","file":"Payment.min.js","sourcesContent":["const {instance} = require(\"../config/razorpay\");\nconst Course = require(\"../models/Course\");\nconst User = require(\"../models/User\");\nconst mailSender = require(\"../utils/mailSender\");\nconst {courseEnrollmentEmail} = require(\"../mail/courseEnrollmentEmail\");\n\nexports.capturePayment = async (req , res) => {\n\n    const {course_id} = req.body;\n    const userId = req.user.id;\n\n    if(!course_id) {\n        return res.json({\n            success:false,\n            message:'Please provide valid course otp',\n            \n        })\n    };\n\n    let course;\n    try{\n        course = await Course.findById(course_id);\n        if(!course) {\n            return res.json({\n                success:false,\n                message:'could not find the course',\n                \n            })\n        };\n\n        const uid = new mongoose.Types.ObjectId(userId);\n        if(course.studentsEnrolled.includes(uid)) {\n            return res.status(200).json({\n                success:false,\n                message:'student is already enrolled',\n\n                \n            });\n        }\n    }catch(error){\n            console.error(error);\n            return res.status(500).json({\n                success:false,\n                message:error.message,\n            });\n    }\n\n    const amount = course.price;\n\n    const currency = \"INR\";\n\n    const options = {\n        amount: amount * 100,\n        currency,\n        receipt: Math.random(Date.now()).toString(),\n        notes:{\n            courseId: course_id,\n            userId,\n        }\n    };\n\n    try{\n            const paymentResponse = await instance.orders.create(options);\n            console.log(paymentResponse);\n            return res.status(200).json({\n                success:true,\n                courseName:course.courseName,\n                courseDescription:course.courseDescription,\n                thumbnail:course.thumbnail,\n                orderId:paymentResponse.id,\n                currency:paymentResponse.currency,\n                amount:paymentResponse.amount,\n                message:'',\n\n                \n            });\n    }\n    catch(error){\n            console.log(error);\n            res.json({\n                success:false,\n                message:\"could not initiate  order\",\n            });\n    }\n};\n\n\nexports.verifySignature = async (req,res) => {\n    const webhookSecret = \"12345678\";\n\n    const signature = req.headers[\"x-razorpay-signature\"];\n\n    const shasum = crypto.createHmac(\"sha256\", webhookSecret);\n\n    shasum.update(JSON.stringify(req.body));\n    const digest = shasum.digest(\"hex\");\n\n    if(signature === digest) {\n        console.log(\"payment is auhorised\");\n\n        const  {courseId, userId} = req.body.payload.payment.entity.notes;\n\n        try{\n            const enrolledCourse = await Course.findOneAndUpdate(\n                                                {_id: courseId},\n                                                {$push:{studentsEnrolled: userId}},\n                                                {new:true},\n            );\n\n            if(!enrolledCourse){\n                return res.status(500).json({\n                    success:false,\n                    message:'course not found',\n                });\n            }\n            console.log(enrolledCourse);\n\n            const enrolledStudent = await User.findOneAndUpdate(\n                                                {_id:userId},\n                                                {$push:{courses:courseId}},\n                                                {new:true},\n            );\n\n            console.log(enrolledStudent);\n\n            const emailResponse = await mailSender(\n                                enrolledStudent.email,\n                                \"Congratulaions\"\n            );\n\n            return res.status(200).json({\n                success:true,\n                message:'signature verified and course added',\n            });\n        }catch(error){\n            return res.status(500).json({\n                success:false,\n                message:error.message,\n            });\n\n        }\n    }\n    else {\n        return res.status(400).json({\n            success:false,\n            message:'Invalid request',\n        });\n    }\n};\n\n"]}
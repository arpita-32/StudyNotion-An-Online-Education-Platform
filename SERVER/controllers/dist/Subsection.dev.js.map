{"version":3,"sources":["Subsection.js"],"names":["SubSection","require","Section","uploadImageToCloudinary","exports","createSubSection","req","res","body","sectionId","title","timeDuration","description","video","files","videoFile","status","json","success","message","process","env","FOLDER_NAME","uploadDetails","create","videoUrl","secure_url","subSectionDetails","findByIdAndUpdate","_id","$push","subSection","SubSectionDetails","updatedSection","error","updateSubSection","subSectionId","findById","undefined","duration","save","populate","console","log","data","deleteSubSection","$pull","findByIdAndDelete"],"mappings":"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","sourcesContent":["const SubSection = require(\"../models/SubSection\");\nconst Section = require(\"../models/Section\");\nconst {uploadImageToCloudinary} = require(\"../utils/imageUploader\");\n\nexports.createSubSection = async (req ,res) => {\n    try{\n        const {sectionId, title,timeDuration,description} = req.body;\n        const video = req.files.videoFile;\n        if(!sectionId || !title || !timeDuration || !video){\n            return res.status(400).json({\n                success:false,\n                message:'All fields are required',\n            });\n        }\n\n        const uploadDetails = await uploadImageToCloudinary(video,process.env.FOLDER_NAME);\n\n        const subSectionDetails = await SubSection.create({\n            title:title,\n            timeDuration:timeDuration,\n            description:description,\n            videoUrl:uploadDetails.secure_url,\n        })\n\n        const updatedSection = await Section.findByIdAndUpdate({_id:sectionId},\n            {$push:{\n                subSection:SubSectionDetails._id,\n\n            }},\n            {new:true}\n        );\n        return res.status(200).json({\n            success:true,\n            message:'sub Section created successfully',\n            updatedSection,\n            \n        });\n    }\n    catch(error){\n        return res.status(500).json({\n            success:false,\n            message:'Internal server error',\n            error:error.message,\n            \n        });\n    }\n}\n//update and delete section\nexports.updateSubSection = async (req, res) => {\n    try {\n      const { sectionId, subSectionId, title, description } = req.body\n      const subSection = await SubSection.findById(subSectionId)\n  \n      if (!subSection) {\n        return res.status(404).json({\n          success: false,\n          message: \"SubSection not found\",\n        })\n      }\n  \n      if (title !== undefined) {\n        subSection.title = title\n      }\n  \n      if (description !== undefined) {\n        subSection.description = description\n      }\n      if (req.files && req.files.video !== undefined) {\n        const video = req.files.video\n        const uploadDetails = await uploadImageToCloudinary(\n          video,\n          process.env.FOLDER_NAME\n        )\n        subSection.videoUrl = uploadDetails.secure_url\n        subSection.timeDuration = `${uploadDetails.duration}`\n      }\n  \n      await subSection.save()\n  \n      // find updated section and return it\n      const updatedSection = await Section.findById(sectionId).populate(\n        \"subSection\"\n      )\n  \n      console.log(\"updated section\", updatedSection)\n  \n      return res.json({\n        success: true,\n        message: \"Section updated successfully\",\n        data: updatedSection,\n      })\n    } catch (error) {\n      console.error(error)\n      return res.status(500).json({\n        success: false,\n        message: \"An error occurred while updating the section\",\n      })\n    }\n  }\n  \n  exports.deleteSubSection = async (req, res) => {\n    try {\n      const { subSectionId, sectionId } = req.body\n      await Section.findByIdAndUpdate(\n        { _id: sectionId },\n        {\n          $pull: {\n            subSection: subSectionId,\n          },\n        }\n      )\n      const subSection = await SubSection.findByIdAndDelete({ _id: subSectionId })\n  \n      if (!subSection) {\n        return res\n          .status(404)\n          .json({ success: false, message: \"SubSection not found\" })\n      }\n  \n      // find updated section and return it\n      const updatedSection = await Section.findById(sectionId).populate(\n        \"subSection\"\n      )\n  \n      return res.json({\n        success: true,\n        message: \"SubSection deleted successfully\",\n        data: updatedSection,\n      })\n    } catch (error) {\n      console.error(error)\n      return res.status(500).json({\n        success: false,\n        message: \"An error occurred while deleting the SubSection\",\n      })\n    }\n  }"],"file":"Subsection.dev.js"}
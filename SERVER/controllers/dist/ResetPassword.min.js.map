{"version":3,"sources":["ResetPassword.js"],"names":["User","require","mailSender","crypto","exports","resetPasswordToken","req","res","email","token","url","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","sent","abrupt","status","json","success","message","findOneAndUpdate","resetPasswordExpires","Date","now","user","concat","t0","console","log","stop","resetPassword","_req$body","password","confirmPassword","userDetails","hashedPassword","_context2","updatedDetails","bcrypt","hash","new","error"],"mappings":"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","file":"ResetPassword.min.js","sourcesContent":["const User = require(\"../models/User\");\nconst mailSender = require(\"../utils/mailSender\");\nconst bcrypt = require(\"bcrypt\");\nconst crypto = require(\"crypto\");\n\nexports.resetPasswordToken = async (req, res) => {\n   try {\n        const email = req.body.email;\n        const user = await User.findOne({email: email});\n        \n        if(!user) {\n            return res.status(404).json({\n                success: false,\n                message: 'Your email is not registered with us'\n            });\n        }\n\n        const token = crypto.randomUUID();\n        const updatedDetails = await User.findOneAndUpdate(\n            {email: email},\n            {\n                token: token,\n                resetPasswordExpires: Date.now() + 5*60*1000,\n            },\n            {new: true}\n        );\n\n        const url = `http://localhost:3000/update-password/${token}`;\n        await mailSender(\n            email,\n            \"Password Reset Link\",\n            `Password Reset Link: ${url}`\n        );\n\n        return res.json({\n            success: true,\n            message: 'Email sent successfully, please check email and change password',\n        });\n   } catch(error) {\n        console.log(error);\n        return res.status(500).json({\n            success: false,\n            message: 'Something went wrong while sending reset email',\n        });\n   }\n}\n\nexports.resetPassword = async(req, res) => {\n    try {\n        const {password, confirmPassword, token} = req.body;\n\n        if(password !== confirmPassword) {\n            return res.status(400).json({\n                success: false,\n                message: 'Passwords do not match',\n            });\n        }\n\n        const userDetails = await User.findOne({token: token});\n        \n        if(!userDetails) {\n            return res.status(404).json({\n                success: false,\n                message: 'Token is invalid',\n            });\n        }\n\n        if(userDetails.resetPasswordExpires < Date.now()) {\n            return res.status(400).json({\n                success: false,\n                message: 'Token has expired, please regenerate your token',\n            });\n        }\n\n        const hashedPassword = await bcrypt.hash(password, 10);\n        await User.findOneAndUpdate(\n            {token: token},\n            {\n                password: hashedPassword,\n                token: null,\n                resetPasswordExpires: null\n            },\n            {new: true},\n        );\n\n        return res.json({\n            success: true,\n            message: 'Password reset successfully',\n        });\n    } catch(error) {\n        console.error(error);\n        return res.status(500).json({\n            success: false,\n            message: 'Something went wrong while resetting password',\n        });\n    }\n}"]}
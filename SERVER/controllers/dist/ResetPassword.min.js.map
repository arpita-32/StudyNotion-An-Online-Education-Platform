{"version":3,"sources":["ResetPassword.js"],"names":["User","require","mailSender","exports","resetPasswordToken","req","res","email","token","url","regeneratorRuntime","async","_context","prev","next","awrap","findOne","sent","abrupt","json","success","fals","message","crypto","randomUUID","findOneAndUpdate","resetPasswordExpires","Date","now","new","concat","t0","console","log","stop","updatedDetails","_req$body","password","confirmPassword","hashedPassword","_context2","body","userDetails","bcrypt","hash","resetPassword","status"],"mappings":"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","file":"ResetPassword.min.js","sourcesContent":["const User =  require(\"../models/User\");\nconst mailSender = require(\"../utils/mailSender\");\nconst bcrypt = require(\"bcrypt\");\n\n\nexports.resetPasswordToken = async (req, res) => {\n\n   try{\n    const email = req.body.email;\n    const user = await User.findOne({email:email});\n    if(!user) {\n        return res.json({\n            success:fals,\n            message:'your email is not registered with us'\n        });\n    }\n\n    const token = crypto.randomUUID();\n\n    const updatedDetails = await User.findOneAndUpdate(\n                                    {email:email},\n                                    {\n                                        token:token,\n                                        resetPasswordExpires: Date.now() + 5*60*1000,\n                                    },\n                                    {new:true}\n    );\n    const url = `http://localhost:3000/update-password/${token}`\n\n    await mailSender(email,\n        \"Password reset link\",\n        `Password reset link:${url}`\n    );\n\n    return res.json({\n        success:true,\n        message:'email sent successfully,please check email and change pwd',\n    });\n   }catch(error){\n    console.log(error);\n    return res.status(500).json({\n        success:false,\n        message:'something went wrong while reset',\n    });\n   }\n}\n\nexports.resetPassword = async(req,res) => {\n    try{\n        const {password,confirmPassword,token} = req.body;\n\n        if(password != confirmPassword){\n            return res.json({\n                success:false,\n                message:'password not matching',\n            });\n        }\n\n        if(!userDetails){\n            return res.json({\n                success:false,\n                message:'Token is invalid',\n            });\n        }\n\n        if( userDetails.resetPasswordExpires < Date.now()) {\n            return res.json({\n                success:false,\n                message:'token is expired ,please regenerate your token',\n            });\n        }\n\n        const hashedPassword = await bcrypt.hash(password, 10);\n\n        await User.findOneAndUpdate(\n            {token:token},\n            {password:hashedPassword},\n            {new:true},\n        );\n\n        return res.status(200).json({\n            success:true,\n            message:'password reset successfully',\n        });\n    }catch(error){\n        return res.status(500).json({\n            success:false,\n            message:'something went wrong',\n        });\n    }\n}"]}
{"version":3,"sources":["auth.js"],"names":["jwt","require","config","auth","req","next","console","log","cookies","token","res","body","header","replace","undefined","status","json","success","message","decode","verify","process","env","JWT_SECRET","user","e","err","accountType","exports","isInstructor"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,gBACpBA,QAAQ,UAAUC,SADlB,IAAMF,KAAMC,QAAQ,kBACpBA,QAAQE,KAAA,SAADC,EAAWF,EAAlBG,GAII,IAEIC,QAAQC,IAAI,SAAUH,EAAII,QAAQC,OAHlCN,QAAOI,IAAA,OAAAH,EAAMM,KAAKL,OAIlBC,IAAQC,EAARH,EAAoBA,QAASK,OAA7BL,EAAAO,KAAAF,OAAAL,EAAAQ,OAAA,iBAAAC,QAAA,SAAA,IAMI,IAACJ,QAAmBK,IAAVL,EACV,OAAWM,EAAJA,OAAgBC,KAAKA,KAAA,CACjBC,SADiB,EAEjBC,QAAE,kBAKb,IACMC,IAAMA,EAAOC,IAAOX,OAAOY,EAAQC,QAAIC,IAAAA,YAIzCC,QAAOL,IAAXA,GAGAf,EAAUoB,KAAHL,EAEHD,MAAOO,GAFX,OAAAf,EAAAK,OAAA,KAAAC,KAAA,CAIHC,SAAA,EAFOC,QAAS,qBAQjBb,IAEIa,MAAAA,GAEP,OAJGZ,QAAAC,IAAAmB,GAIHhB,EAAAK,OAAA,KAAAC,KAAA,CAxCLC,SAAA,EAsCYC,QAAS,iDASLD,QAAAA,UAAS,SAAAb,EADeM,EAAAL,GAExBa,IAFJ,GAAA,YAAAd,EAAAoB,KAAAG,YAIH,OAAAjB,EAAAK,OAAA,KAAAC,KAAA,CAHOC,SAAS,EAIbC,QAAA,+DAIAD,IADwB,MAA5BS,GAIH,OAAAhB,EAAAK,OAAA,KAAAC,KAAA,CAfLC,SAAA,EAaYC,QAAS,sCAOTU,QAAAC,aAAO,SAAWzB,EAAKY,EAAKX,GACxBY,IACAC,GAAS,eAATA,EAAOM,KAAEG,YAFb,OAAAjB,EAAAK,OAAA,KAAAC,KAAA,CAIHC,SAAA,EAFOC,QAAS,gDAMjBb,IAEIa,MAAAA,GAFJ,OAAAR,EAAAK,OAAA,KAAAC,KAAA,CAIHC,SAAA,EAfLC,QAAA,iCAmBQU,QAAIxB,QAASuB,SAAAA,EAAAA,EAATtB,GACA,IACIY,GADwB,UACxBA,EAAOO,KAAEG,YACTT,OAASR,EAAAK,OAAA,KAAAC,KAAA,CAFbC,SAAA,EAIHC,QAAA,6DAGLb,IAEQY,MAAAA,GACAC,OAASR,EAAAK,OAAA,KAAAC,KAAA,CAFbC,SAAA,EAIHC,QAAA","file":"auth.min.js","sourcesContent":["const jwt = require(\"jsonwebtoken\")\nrequire(\"dotenv\").config();\nconst User = require(\"../models/User\");\n\nexports.auth = (req, res, next) => {\n    try {\n\n        console.log(\"cookie\", req.cookies.token);\n        console.log(\"body\", req.body.token);\n\n\n        const token = req.cookies.token || req.body.token || req.header(\"Authorization\").replace(\"Bearer\",\"\");\n        // const token = req.cookie.token\n\n        if (!token || token === undefined) {\n            return res.status(401).json({\n                success: false,\n                message: \"token missing\"\n            });\n        }\n\n        // verify the token\n        try {\n            const decode = jwt.verify(token, process.env.JWT_SECRET);\n\n            console.log(decode);\n\n            req.user = decode;\n        }\n        catch (e) {\n            return res.status(401).json({\n                success: false,\n                message: \"token is invalid\"\n            })\n        }\n\n        next();\n    }\n    catch (err) {\n        console.log(err)\n        return res.status(401).json({\n            success: false,\n            message: \"Something went wrong while verifying token\"\n        })\n    }\n}\n\nexports.isStudent = (req, res, next) => {\n    try {\n        if (req.user.accountType !== \"Student\") {\n            return res.status(401).json({\n                success: false,\n                message: \"This is a protect route for students you can not access it\"\n            })\n        }\n        next();\n    }\n    catch (err) {\n        return res.status(500).json({\n            success: false,\n            message: \"User Role is cannot be verified\"\n        })\n    }\n}\nexports.isInstructor = (req, res, next) => {\n    try {\n        if (req.user.accountType !== \"Instructor\") {\n            return res.status(401).json({\n                success: false,\n                message: \"This is a protect route for Instructor only\"\n            })\n        }\n        next();\n    }\n    catch (err) {\n        return res.status(500).json({\n            success: false,\n            message: \"Instructor is not Matching\"\n        })\n    }\n}\nexports.isAdmin = (req, res, next) => {\n    try {\n        if (req.user.accountType !== \"Admin\") {\n            return res.status(401).json({\n                success: false,\n                message: \"This is a protect route for Admins,you can not access it\"\n            })\n        }\n        next();\n    }\n    catch (err) {\n        return res.status(500).json({\n            success: false,\n            message: \"User Role is not Matching\"\n        })\n    }\n}"]}
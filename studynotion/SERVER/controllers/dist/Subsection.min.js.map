{"version":3,"sources":["Subsection.js"],"names":["SubSection","require","Section","exports","req","res","_req$body","sectionId","title","timeDuration","description","video","uploadDetails","subSectionDetails","updatedSection","regeneratorRuntime","async","_context","prev","next","body","uploadImageToCloudinary","createSubSection","abrupt","status","json","success","message","awrap","process","env","FOLDER_NAME","sent","create","videoUrl","secure_url","$push","subSection","_id","new","populate","t0","stop","_req$body2","subSectionId","_context2","findById","data","undefined","files","concat","duration","save","updateSubSection","console","error","deleteSubSection","_req$body3","_context3","findByIdAndUpdate","findByIdAndDelete"],"mappings":"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","file":"Subsection.min.js","sourcesContent":["const SubSection = require(\"../models/SubSection\");\nconst Section = require(\"../models/Section\");\nconst {uploadImageToCloudinary} = require(\"../utils/imageUploader\");\n\nexports.createSubSection = async (req ,res) => {\n    try{\n        const {sectionId, title, timeDuration, description} = req.body;\n        const video = req.files.video; // Changed from videoFile to video\n        \n        if(!sectionId || !title || !timeDuration || !video){\n            return res.status(400).json({\n                success: false,\n                message: 'All fields are required',\n            });\n        }\n\n        const uploadDetails = await uploadImageToCloudinary(video, process.env.FOLDER_NAME);\n\n        const subSectionDetails = await SubSection.create({\n            title: title,\n            timeDuration: timeDuration,\n            description: description,\n            videoUrl: uploadDetails.secure_url,\n        })\n\n        const updatedSection = await Section.findByIdAndUpdate(\n            {_id: sectionId},\n            {\n                $push: {\n                    subSection: subSectionDetails._id,\n                }\n            },\n            {new: true}\n        ).populate(\"subSection\");\n\n        return res.status(200).json({\n            success: true,\n            message: 'Sub Section created successfully',\n            data: updatedSection,\n        });\n    }\n    catch(error){\n        return res.status(500).json({\n            success: false,\n            message: 'Internal server error',\n            error: error.message,\n        });\n    }\n}\n\nexports.updateSubSection = async (req, res) => {\n    try {\n        const { sectionId, subSectionId, title, description } = req.body\n        const subSection = await SubSection.findById(subSectionId)\n\n        if (!subSection) {\n            return res.status(404).json({\n                success: false,\n                message: \"SubSection not found\",\n            })\n        }\n\n        if (title !== undefined) {\n            subSection.title = title\n        }\n\n        if (description !== undefined) {\n            subSection.description = description\n        }\n        \n        if (req.files && req.files.video !== undefined) {\n            const video = req.files.video\n            const uploadDetails = await uploadImageToCloudinary(\n                video,\n                process.env.FOLDER_NAME\n            )\n            subSection.videoUrl = uploadDetails.secure_url\n            subSection.timeDuration = `${uploadDetails.duration}`\n        }\n\n        await subSection.save()\n\n        const updatedSection = await Section.findById(sectionId).populate(\"subSection\")\n\n        return res.json({\n            success: true,\n            message: \"Section updated successfully\",\n            data: updatedSection,\n        })\n    } catch (error) {\n        console.error(error)\n        return res.status(500).json({\n            success: false,\n            message: \"An error occurred while updating the section\",\n        })\n    }\n}\n\nexports.deleteSubSection = async (req, res) => {\n    try {\n        const { subSectionId, sectionId } = req.body\n        await Section.findByIdAndUpdate(\n            { _id: sectionId },\n            {\n                $pull: {\n                    subSection: subSectionId,\n                },\n            }\n        )\n        const subSection = await SubSection.findByIdAndDelete({ _id: subSectionId })\n\n        if (!subSection) {\n            return res.status(404).json({ \n                success: false, \n                message: \"SubSection not found\" \n            })\n        }\n\n        const updatedSection = await Section.findById(sectionId).populate(\"subSection\")\n\n        return res.json({\n            success: true,\n            message: \"SubSection deleted successfully\",\n            data: updatedSection,\n        })\n    } catch (error) {\n        console.error(error)\n        return res.status(500).json({\n            success: false,\n            message: \"An error occurred while deleting the SubSection\",\n        })\n    }\n}"]}
{"version":3,"sources":["Subsection.js"],"names":["SubSection","require","Section","uploadImageToCloudinary","exports","createSubSection","req","res","body","sectionId","title","timeDuration","description","video","files","status","json","success","message","process","env","FOLDER_NAME","uploadDetails","create","videoUrl","secure_url","subSectionDetails","findByIdAndUpdate","_id","$push","subSection","populate","updatedSection","data","error","updateSubSection","subSectionId","findById","undefined","duration","save","console","deleteSubSection","$pull","findByIdAndDelete"],"mappings":"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","sourcesContent":["const SubSection = require(\"../models/SubSection\");\nconst Section = require(\"../models/Section\");\nconst {uploadImageToCloudinary} = require(\"../utils/imageUploader\");\n\nexports.createSubSection = async (req ,res) => {\n    try{\n        const {sectionId, title, timeDuration, description} = req.body;\n        const video = req.files.video; // Changed from videoFile to video\n        \n        if(!sectionId || !title || !timeDuration || !video){\n            return res.status(400).json({\n                success: false,\n                message: 'All fields are required',\n            });\n        }\n\n        const uploadDetails = await uploadImageToCloudinary(video, process.env.FOLDER_NAME);\n\n        const subSectionDetails = await SubSection.create({\n            title: title,\n            timeDuration: timeDuration,\n            description: description,\n            videoUrl: uploadDetails.secure_url,\n        })\n\n        const updatedSection = await Section.findByIdAndUpdate(\n            {_id: sectionId},\n            {\n                $push: {\n                    subSection: subSectionDetails._id,\n                }\n            },\n            {new: true}\n        ).populate(\"subSection\");\n\n        return res.status(200).json({\n            success: true,\n            message: 'Sub Section created successfully',\n            data: updatedSection,\n        });\n    }\n    catch(error){\n        return res.status(500).json({\n            success: false,\n            message: 'Internal server error',\n            error: error.message,\n        });\n    }\n}\n\nexports.updateSubSection = async (req, res) => {\n    try {\n        const { sectionId, subSectionId, title, description } = req.body\n        const subSection = await SubSection.findById(subSectionId)\n\n        if (!subSection) {\n            return res.status(404).json({\n                success: false,\n                message: \"SubSection not found\",\n            })\n        }\n\n        if (title !== undefined) {\n            subSection.title = title\n        }\n\n        if (description !== undefined) {\n            subSection.description = description\n        }\n        \n        if (req.files && req.files.video !== undefined) {\n            const video = req.files.video\n            const uploadDetails = await uploadImageToCloudinary(\n                video,\n                process.env.FOLDER_NAME\n            )\n            subSection.videoUrl = uploadDetails.secure_url\n            subSection.timeDuration = `${uploadDetails.duration}`\n        }\n\n        await subSection.save()\n\n        const updatedSection = await Section.findById(sectionId).populate(\"subSection\")\n\n        return res.json({\n            success: true,\n            message: \"Section updated successfully\",\n            data: updatedSection,\n        })\n    } catch (error) {\n        console.error(error)\n        return res.status(500).json({\n            success: false,\n            message: \"An error occurred while updating the section\",\n        })\n    }\n}\n\nexports.deleteSubSection = async (req, res) => {\n    try {\n        const { subSectionId, sectionId } = req.body\n        await Section.findByIdAndUpdate(\n            { _id: sectionId },\n            {\n                $pull: {\n                    subSection: subSectionId,\n                },\n            }\n        )\n        const subSection = await SubSection.findByIdAndDelete({ _id: subSectionId })\n\n        if (!subSection) {\n            return res.status(404).json({ \n                success: false, \n                message: \"SubSection not found\" \n            })\n        }\n\n        const updatedSection = await Section.findById(sectionId).populate(\"subSection\")\n\n        return res.json({\n            success: true,\n            message: \"SubSection deleted successfully\",\n            data: updatedSection,\n        })\n    } catch (error) {\n        console.error(error)\n        return res.status(500).json({\n            success: false,\n            message: \"An error occurred while deleting the SubSection\",\n        })\n    }\n}"],"file":"Subsection.dev.js"}
{"version":3,"sources":["ResetPassword.js"],"names":["User","require","mailSender","bcrypt","crypto","exports","resetPasswordToken","req","res","email","body","findOne","user","status","json","success","message","token","randomUUID","findOneAndUpdate","resetPasswordExpires","Date","now","updatedDetails","url","console","log","resetPassword","password","confirmPassword","userDetails","hash","hashedPassword","error"],"mappings":"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","sourcesContent":["const User = require(\"../models/User\");\nconst mailSender = require(\"../utils/mailSender\");\nconst bcrypt = require(\"bcrypt\");\nconst crypto = require(\"crypto\");\n\nexports.resetPasswordToken = async (req, res) => {\n   try {\n        const email = req.body.email;\n        const user = await User.findOne({email: email});\n        \n        if(!user) {\n            return res.status(404).json({\n                success: false,\n                message: 'Your email is not registered with us'\n            });\n        }\n\n        const token = crypto.randomUUID();\n        const updatedDetails = await User.findOneAndUpdate(\n            {email: email},\n            {\n                token: token,\n                resetPasswordExpires: Date.now() + 5*60*1000,\n            },\n            {new: true}\n        );\n\n        const url = `http://localhost:3000/update-password/${token}`;\n        await mailSender(\n            email,\n            \"Password Reset Link\",\n            `Password Reset Link: ${url}`\n        );\n\n        return res.json({\n            success: true,\n            message: 'Email sent successfully, please check email and change password',\n        });\n   } catch(error) {\n        console.log(error);\n        return res.status(500).json({\n            success: false,\n            message: 'Something went wrong while sending reset email',\n        });\n   }\n}\n\nexports.resetPassword = async(req, res) => {\n    try {\n        const {password, confirmPassword, token} = req.body;\n\n        if(password !== confirmPassword) {\n            return res.status(400).json({\n                success: false,\n                message: 'Passwords do not match',\n            });\n        }\n\n        const userDetails = await User.findOne({token: token});\n        \n        if(!userDetails) {\n            return res.status(404).json({\n                success: false,\n                message: 'Token is invalid',\n            });\n        }\n\n        if(userDetails.resetPasswordExpires < Date.now()) {\n            return res.status(400).json({\n                success: false,\n                message: 'Token has expired, please regenerate your token',\n            });\n        }\n\n        const hashedPassword = await bcrypt.hash(password, 10);\n        await User.findOneAndUpdate(\n            {token: token},\n            {\n                password: hashedPassword,\n                token: null,\n                resetPasswordExpires: null\n            },\n            {new: true},\n        );\n\n        return res.json({\n            success: true,\n            message: 'Password reset successfully',\n        });\n    } catch(error) {\n        console.error(error);\n        return res.status(500).json({\n            success: false,\n            message: 'Something went wrong while resetting password',\n        });\n    }\n}"],"file":"ResetPassword.dev.js"}
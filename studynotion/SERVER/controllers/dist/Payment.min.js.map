{"version":3,"sources":["Payment.js"],"names":["stripe","require","process","env","STRIPE_SECRET_KEY","Course","mailSender","courseEnrollmentEmail","exports","capturePayment","req","res","course_id","userId","course","uid","amount","paymentIntent","regeneratorRuntime","async","_context","prev","next","body","user","id","abrupt","status","json","success","message","awrap","findById","sent","mongoose","Types","ObjectId","studentsEnrolled","includes","t0","console","error","price","create","metadata","courseId","clientSecret","client_secret","courseName","courseDescription","thumbnail","currency","t1","stop","_req$body","user_id","enrolledCourse","enrolledStudent","emailResponse","_context2","findByIdAndUpdate","new","email","log","handlePaymentSuccess"],"mappings":"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","file":"Payment.min.js","sourcesContent":["const stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY); // Use your Stripe secret key\nconst Course = require(\"../models/Course\");\nconst User = require(\"../models/User\");\nconst mailSender = require(\"../utils/mailSender\");\nconst { courseEnrollmentEmail } = require(\"../mail/courseEnrollmentEmail\");\nconst mongoose = require(\"mongoose\");\n\n// Capture Payment\nexports.capturePayment = async (req, res) => {\n    const { course_id } = req.body;\n    const userId = req.user.id;\n\n    if (!course_id) {\n        return res.status(400).json({\n            success: false,\n            message: \"Please provide a valid course ID\",\n        });\n    }\n\n    let course;\n    try {\n        course = await Course.findById(course_id);\n        if (!course) {\n            return res.status(404).json({\n                success: false,\n                message: \"Could not find the course\",\n            });\n        }\n\n        const uid = new mongoose.Types.ObjectId(userId);\n        if (course.studentsEnrolled.includes(uid)) {\n            return res.status(400).json({\n                success: false,\n                message: \"Student is already enrolled\",\n            });\n        }\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({\n            success: false,\n            message: \"Error retrieving course details\",\n        });\n    }\n\n    const amount = course.price * 100; // Stripe processes amounts in cents\n    const currency = \"INR\";\n\n    try {\n        // Create a payment intent\n        const paymentIntent = await stripe.paymentIntents.create({\n            amount,\n            currency,\n            metadata: {\n                courseId: course_id,\n                userId,\n            },\n        });\n\n        return res.status(200).json({\n            success: true,\n            clientSecret: paymentIntent.client_secret,\n            courseName: course.courseName,\n            courseDescription: course.courseDescription,\n            thumbnail: course.thumbnail,\n            amount: paymentIntent.amount,\n            currency: paymentIntent.currency,\n        });\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({\n            success: false,\n            message: \"Could not initiate payment\",\n        });\n    }\n};\n\n// Handle Payment Completion\nexports.handlePaymentSuccess = async (req, res) => {\n    const { course_id, user_id } = req.body;\n\n    if (!course_id || !user_id) {\n        return res.status(400).json({\n            success: false,\n            message: \"Course ID and User ID are required\",\n        });\n    }\n\n    try {\n        // Update the course and user documents\n        const enrolledCourse = await Course.findByIdAndUpdate(\n            course_id,\n            { $push: { studentsEnrolled: user_id } },\n            { new: true }\n        );\n\n        if (!enrolledCourse) {\n            return res.status(404).json({\n                success: false,\n                message: \"Course not found\",\n            });\n        }\n\n        const enrolledStudent = await User.findByIdAndUpdate(\n            user_id,\n            { $push: { courses: course_id } },\n            { new: true }\n        );\n\n        if (!enrolledStudent) {\n            return res.status(404).json({\n                success: false,\n                message: \"User not found\",\n            });\n        }\n\n        // Send email\n        const emailResponse = await mailSender(\n            enrolledStudent.email,\n            \"Course Enrollment Success\",\n            courseEnrollmentEmail(enrolledCourse.courseName)\n        );\n\n        console.log(\"Email sent: \", emailResponse);\n\n        return res.status(200).json({\n            success: true,\n            message: \"Payment successful and course enrollment updated\",\n        });\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({\n            success: false,\n            message: \"Error processing payment\",\n        });\n    }\n};\n"]}
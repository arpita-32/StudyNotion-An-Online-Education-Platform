"use strict";var jwt=require("jsonwebtoken");require("dotenv").config();var User=require("../models/User");exports.auth=function(s,e,t){try{console.log("cookie",s.cookies.token),console.log("body",s.body.token);var o=s.cookies.token||s.body.token||s.header("Authorization").replace("Bearer","");if(!o||void 0===o)return e.status(401).json({success:!1,message:"token missing"});try{var n=jwt.verify(o,process.env.JWT_SECRET);console.log(n),s.user=n}catch(s){return e.status(401).json({success:!1,message:"token is invalid"})}t()}catch(s){return console.log(s),e.status(401).json({success:!1,message:"Something went wrong while verifying token"})}},exports.isStudent=function(s,e,t){try{if("Student"!==s.user.accountType)return e.status(401).json({success:!1,message:"This is a protect route for students you can not access it"});t()}catch(s){return e.status(500).json({success:!1,message:"User Role is cannot be verified"})}},exports.isInstructor=function(s,e,t){try{if("Instructor"!==s.user.accountType)return e.status(401).json({success:!1,message:"This is a protect route for Instructor only"});t()}catch(s){return e.status(500).json({success:!1,message:"Instructor is not Matching"})}},exports.isAdmin=function(s,e,t){try{if("Admin"!==s.user.accountType)return e.status(401).json({success:!1,message:"This is a protect route for Admins,you can not access it"});t()}catch(s){return e.status(500).json({success:!1,message:"User Role is not Matching"})}};
//# sourceMappingURL=auth.min.js.map
